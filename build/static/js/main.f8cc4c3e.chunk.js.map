{"version":3,"sources":["components/ScoreGame.js","components/Gamer.js","components/NamePlayer.js","App.js","serviceWorker.js","index.js"],"names":["ScoreGame","scoreEnd","total","Container","styled","div","Name","h1","Score","Button","Total","Rest","Gamer","gamer","useState","score","saveScore","saveTotal","name","type","placeholder","onChange","e","target","value","onClick","scoreTotal","parseInt","Span","span","InputName","input","NamePlayer","setGamer","ContainerHeader","AddPlayer","AllContainer","App","id","gamers","setGamers","preventDefault","uuid","allGamers","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAWeA,EATG,SAAC,GAAa,IAEtBC,EAAW,IAFU,EAAXC,MAIhB,OACI,8BAAOD,I,2lDCHf,IAAME,EAAYC,IAAOC,IAAV,KAWTC,EAAOF,IAAOG,GAAV,KAOJC,EAAQJ,IAAOC,IAAV,KAoBLI,EAASL,IAAOC,IAAV,KAgBNK,EAAQN,IAAOC,IAAV,KAQLM,EAAOP,IAAOC,IAAV,KAiEKO,EA3DD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EAGIC,mBAAS,IAHb,mBAGhBC,EAHgB,KAGTC,EAHS,OAIIF,mBAAS,GAJb,mBAIhBZ,EAJgB,KAITe,EAJS,KAMjBC,EAAML,EAANK,KAiBN,OACI,kBAACf,EAAD,KACI,kBAACG,EAAD,KAAOY,GAEP,kBAACV,EAAD,KACI,2BACIW,KAAK,SACLC,YAAY,IACZC,SAvBK,SAACC,GAAM,IAAD,IACvBN,GAAS,EACQM,EAAEC,OAAOC,MADjB,mBACRF,EAAEC,OAAOL,KADD,UAuBGM,MAAOT,KAKf,kBAACN,EAAD,KACI,2BACIU,KAAK,SACLK,MAAM,QACNC,QA3BF,WACV,GAAY,KAATV,EAAa,OAAO,KAEvB,IAAMW,EAAaxB,EAAQyB,SAASZ,GACpCE,EAAUS,GACVV,EAAU,QA0BN,kBAACN,EAAD,KACI,8BAAOR,IAGX,kBAACS,EAAD,KACI,kBAAC,EAAD,CACIT,MAAOA,O,0QCvH3B,IAAM0B,EAAOxB,IAAOyB,KAAV,KAKJC,EAAY1B,IAAO2B,MAAV,KA4BAC,EAtBI,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUpB,EAAW,EAAXA,MAO3B,OACI,kBAAC,WAAD,KACI,kBAACe,EAAD,2BACA,kBAACE,EAAD,CACIX,KAAK,OACLC,YAAY,qBACZF,KAAK,OACLM,MAAOX,EAAMK,KACbG,SAdS,SAACC,GAClBW,EAAS,eAEJX,EAAEC,OAAOL,KAAMI,EAAEC,OAAOC,a,qvBCZrC,IAAMU,EAAkB9B,IAAOC,IAAV,KAkBf8B,EAAY/B,IAAOC,IAAV,KAOT+B,EAAehC,IAAOC,IAAV,KAwEHgC,MAhEf,WAAe,MAEgBvB,mBAAS,CAC/BI,KAAK,GACLoB,GAAG,KAJG,mBAEHzB,EAFG,KAEIoB,EAFJ,OAOkBnB,mBAAS,IAP3B,mBAOHyB,EAPG,KAOKC,EAPL,KA8Bb,OACE,kBAAC,WAAD,KACI,kBAACN,EAAD,KACI,0CAKJ,kBAACC,EAAD,KACA,kBAAC,EAAD,CACItB,MAAOA,EACPoB,SAAUA,IAEd,2BACId,KAAK,SACLK,MAAM,UACNC,QArCY,SAACH,GACjBA,EAAEmB,iBAEF5B,EAAMyB,GAAGI,OAES,SAAA7B,GACd2B,EAAU,GAAD,mBACFD,GADE,CAEL1B,KAGR8B,CAAU9B,GACVA,EAAMyB,GAAGI,MAGTT,EAAS,CACLf,KAAK,GACLoB,GAAG,SAwBP,kBAACF,EAAD,KACKG,EAAOK,KAAI,SAAA/B,GAAK,OACb,kBAAC,EAAD,CACIA,MAAOA,EACPgC,IAAKhC,EAAMyB,WClFXQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8cc4c3e.chunk.js","sourcesContent":["import React from 'react'\n\nconst ScoreGame = ({total}) => {\n\n    const scoreEnd = 10000-total;\n\n    return ( \n        <span>{scoreEnd}</span>\n     );\n}\n \nexport default ScoreGame;","import React, { useState } from 'react'\nimport styled from '@emotion/styled';\nimport ScoreGame from \"./ScoreGame\";\n\nconst Container = styled.div`\nbackground-color: #883d5975;\n    max-width:175px;\n    border-style: solid;\n    margin-left:2rem;\n    padding:.5rem;\n    border-radius:10px;\n    box-shadow: 10px 10px 5px grey;\n    \n`;\n\nconst Name = styled.h1`\n    text-align: center;\n    text-transform: uppercase;\n    color:red;\n    margin:2px 2px;\n    text-shadow:2px 2px 5px black;\n`;\nconst Score = styled.div`\n    text-align:center;\n    margin-top:12px ;\n    \n    input{\n        font-size: 20px;\n        text-align: -webkit-center;\n        padding: 15px 8px;\n        width:40%;\n        border-radius:6px;\n        box-shadow: 2px 2px 3px grey;\n        transition: background-color .8s ease; \n        \n        :hover{\n            \n            background-color: #883d5975;\n        }\n    }\n`;\n\nconst Button = styled.div`\n   text-align:center;\n   margin-top:10px ;\n   input{\n       padding:10px;\n       border-radius:6px;\n       box-shadow: 2px 2px 3px grey;\n       transition: background-color .8s ease; \n        \n        :hover{\n            cursor:pointer;\n            background-color: #883d5975;\n        }\n   }\n   \n`;\nconst Total = styled.div`\n    text-align:center;\n    margin-top:20px;\n    font-size:30px;\n    font-weight:bold;\n    text-shadow: 0 0 3px #FF0000;\n    \n`;\nconst Rest = styled.div`\n    text-align:right;\n    margin-right:10px;\n`;\n\n\nconst Gamer = ({gamer}) => {\n\n    //state\n    const [score, saveScore] = useState('');\n    const [total, saveTotal] = useState(0);\n\n    const{name}=gamer;\n    \n    const handleChange = (e) =>{\n        saveScore(\n        [e.target.name]= e.target.value\n        )\n    }\n\n    const click = () =>{\n        if(score ===''){return null;}\n\n        const scoreTotal = total + parseInt(score);\n        saveTotal(scoreTotal);\n        saveScore('');\n    }\n\n\n    return ( \n        <Container>\n            <Name>{name}</Name>\n            \n            <Score>\n                <input \n                    type=\"number\"\n                    placeholder='0'\n                    onChange={handleChange}\n                    value={score}        \n                />\n            \n            </Score>\n\n            <Button>\n                <input \n                    type=\"button\"\n                    value='sumar'\n                    onClick={click}\n            />\n            </Button>\n\n            <Total>\n                <span>{total}</span>\n            </Total>\n\n            <Rest>\n                <ScoreGame\n                    total={total}\n                />\n            </Rest>\n\n        </Container>\n     );\n}\n \nexport default Gamer;","import React,{ Fragment} from 'react'\nimport styled from '@emotion/styled';\n\n\nconst Span = styled.span`\n    font-size:30px;\n    font-weight:bold;\n    margin-right:1rem;\n`;\nconst InputName = styled.input`\n    padding: 10px 12px;\n    margin-right:1rem;\n`\n\n\nconst NamePlayer = ({setGamer, gamer}) => {\n    const handleChange = (e) =>{\n        setGamer({\n            \n            [e.target.name]:e.target.value\n        })\n    }\n    return ( \n        <Fragment>\n            <Span>Agregar un Jugador</Span>\n            <InputName \n                type=\"text\"\n                placeholder='Nombre del Jugador'\n                name='name'\n                value={gamer.name}\n                onChange={handleChange}\n            />\n            \n        </Fragment>\n     );\n}\n \nexport default NamePlayer;","import React,{Fragment, useState} from 'react';\nimport Gamer from './components/Gamer';\nimport styled from '@emotion/styled';\nimport NamePlayer from './components/NamePlayer';\nimport uuid from 'uuid/v4';\n\n\nconst ContainerHeader = styled.div`\n    display:grid;\n    flex-direction: column;\n    justify-content: right;\n\n    header{\n        border:2px solid black;\n        font-family: 'Racing Sans One', cursive;\n        font-size:100px;\n        padding-left: 103px;\n        padding-right:75px;\n        background-color: burlywood;\n        box-shadow: -13px 13px 0px grey;\n        text-shadow: 2px 2px 1px red;\n\n    }\n`;\n\nconst AddPlayer = styled.div`\n        background-color: #deb887d9;\n        input{\n            padding:10px 12px;\n        }\n`;\n\nconst AllContainer = styled.div`\n    display: flex;\n    margin-top: 2rem;\n`;\n\n\n\n\nfunction App() {\n     //state\n     const [gamer, setGamer] = useState({\n         name:'',\n         id:''\n     });\n\n     const [gamers, setGamers] = useState([]);\n\n    const handleSubmit =(e) =>{\n        e.preventDefault();\n\n        gamer.id=uuid();\n\n        const allGamers = gamer =>{\n            setGamers([\n                ...gamers,\n                gamer\n            ])\n        }\n        allGamers(gamer);\n        gamer.id=uuid();\n        \n        //resetear\n        setGamer({\n            name:'',\n            id:''\n        })\n    }\n    \n  return (\n    <Fragment>\n        <ContainerHeader>\n            <header>\n                10MIL\n            </header>\n        </ContainerHeader>\n\n        <AddPlayer>\n        <NamePlayer \n            gamer={gamer}\n            setGamer={setGamer}\n        />\n        <input \n            type=\"button\"\n            value=\"Agregar\"\n            onClick ={handleSubmit}\n        />\n        </AddPlayer>\n\n        <AllContainer>\n            {gamers.map(gamer=>(\n                <Gamer \n                    gamer={gamer}\n                    key={gamer.id}\n\n                />\n            ))}\n        </AllContainer>\n    \n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}